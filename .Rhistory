"4" = "Bachelors Degree",
"5" = "Masters Degree",
"6" =  "Doctorate"))
CPtypes_audio$MOTedulevel <- as.numeric(as.character(CPtypes_audio$MOTedulevel))
compareRecordings <- CPdata %>% filter(VMSgroup != "noVMS") %>% # only analysing withVMS infants with this variable
group_by(VMS.Prod.Cong, subj, ctype) %>%
tally() %>%
summarise(meanProd = mean(n)) %>%
ungroup() %>%
add_row(VMS.Prod.Cong = F, meanProd = 0, subj = "351") %>% # because 351 had 0 non-congruent CPs, row is missing.
arrange(VMS.Prod.Cong, subj) #otherwise when you do the paired test below, it's not lined up right
compareRecordings.spread <- compareRecordings %>% group_by(subj) %>% # to allow pairwise comparisons
spread(VMS.Prod.Cong,meanProd) %>%
rename(VMS.Prod.Cong=`TRUE`, VMS.Prod.Incong=`FALSE`)
matchPrompt <- ProdData %>%
dplyr::select(subj, VMSgroup, PCVMSMatch.Prompt) %>%   # Both VMS groups included
mutate(Type = "inREP") %>%                             # BUT no CPs are inREP for noVMS infants; all turned to NA
rename(PC = PCVMSMatch.Prompt) %>%                     # %s represent proportion of CPs that did match prompt
mutate(PC = ifelse(VMSgroup != "noVMS" & is.na(PC),0, PC))  # change NAs to 0 to include withVMS infants who never match with CG input
nomatchPrompt <- ProdData %>%
dplyr::select(subj, VMSgroup, PCNoVMSMatch.Prompt) %>% # Both VMS groups included
mutate(Type = "outREP") %>%                           # all CPs are outREP for noVMS infants
rename(PC = PCNoVMSMatch.Prompt)                      # %s represent proportion of CPs that didn't match prompt
match.data.Prompt <- bind_rows(matchPrompt, nomatchPrompt)
match.data.Prompt.spread <- match.data.Prompt %>%      # to allow for paired comparisons of inREP vs. outREP consonants for withVMS infants
group_by(subj) %>% # to allow pairwise comparisons
spread(Type, PC)
matchObject <- ProdData %>%
dplyr::select(subj, VMSgroup, PCVMSMatch.Obj) %>%     # Both VMS groups included
mutate(Type = "inREP") %>%                            # BUT no CPs are inREP for noVMS infants; all turned to NA
rename(PC = PCVMSMatch.Obj) %>%                       # %s represent proportion of CPs that did match object
mutate(PC = ifelse(VMSgroup != "noVMS" & is.na(PC),0, PC)) # change NAs to 0 to include infants who always match to object,
nomatchObject <- ProdData %>%
dplyr::select(subj, VMSgroup, PCNoVMSMatch.Obj) %>%   # Both VMS groups included
mutate(Type = "outREP") %>%                           # all CPs are outREP for noVMS infants
rename(PC = PCNoVMSMatch.Obj) %>%                        # %s represent proportion of CPs that didn't match prompt
mutate(PC = ifelse(subj != "944" & is.na(PC), 0, PC))     # change NAs to 0 to include infants who always match to object,
match.data.Object<- bind_rows(matchObject, nomatchObject)
match.data.Object.spread <- match.data.Object %>%      # to allow for paired comparisons of inREP vs. outREP consonants for withVMS infants
group_by(subj) %>% # to allow pairwise comparisons
spread(Type, PC)
devdata_types <- read_feather("Data/basic_levels_Mar1518_randsubj.feather") %>%
mutate(subj = factor(subj)) %>%
filter(speaker == 'CHI') %>%    # select only infant productions
group_by(subj, month, audio_video) %>%
summarise(nTypes = n_distinct(basic_level))
devdata_types <- read_feather("Data/basic_levels_Mar1518_randsubj.feather") %>%
mutate(subj = factor(subj)) %>%
filter(speaker == 'CHI') %>%    # select only infant productions
group_by(subj, month, audio_video) %>%
summarise(nTypes = n_distinct(basic_level))
devdata_tokens <- read_feather("Data/basic_levels_Mar1518_randsubj.feather") %>%
mutate(subj = factor(subj)) %>%
filter(speaker == 'CHI') %>%    # select only infant productions
group_by(subj, month, audio_video) %>%
tally() %>%
rename("nTokens" = "n") %>%
left_join(devdata_types)
devdata_input <- read_feather("Data/basic_levels_Mar1518_randsubj.feather") %>%
mutate(subj = factor(subj)) %>%
filter(speaker == 'MOT') %>%    # select only infant productions
group_by(subj, month, audio_video) %>%
tally() %>%
rename("nInput" = "n") %>%
left_join(devdata_tokens) %>%
replace(is.na(.), 0)
devdataCDI <- read_csv("Data/CDI_randsubj.csv") %>%
mutate(subj = factor(subj),
month = factor(month),
month = fct_recode(month,
"06" = "6",
"07" = "7",
"08" = "8",
"09" = "9")) %>%
left_join(devdata_input) %>%
replace(is.na(.), 0)
devdataCDI <- read_csv("Data/CDI_randsubj.csv") %>%
mutate(subj = factor(subj),
month = factor(month),
month = fct_recode(month,
"06" = "6",
"07" = "7",
"08" = "8",
"09" = "9")) %>%
left_join(devdata_input) %>%
replace(is.na(.), 0)
View(devdataCDI)
CPdata_dev <- ProdData %>% select(subj, VMSgroup, CPtypes, CPtokens)
devdata <- devdataCDI %>%
left_join(devdata_tokens) %>%
select(subj, month, audio_video, nTokens, nTypes, nInput, CDI_TotalProd) %>%
left_join(vmstotal, by = "subj") %>%
select(-month.y) %>%
rename("month" = "month.x") %>%  # remember to filter by audio_video when running tests on CDI data
left_join(CPdata_dev)
firstwordaudio <- devdata %>% filter(audio_video == "audio" & nTokens > 0) %>% group_by(subj) %>% summarise(Age1stWordaudio = min(month))
firstwordvideo <- devdata %>% filter(audio_video == "video" & nTokens > 0) %>% group_by(subj) %>% summarise(Age1stWordvideo = min(month))
firstwordCDI <- devdata %>% filter(CDI_TotalProd > 0) %>% group_by(subj) %>% summarise(Age1stWordCDI = min(month))
devdata <- devdata %>%
left_join(firstwordaudio) %>%
left_join(firstwordvideo) %>%
left_join(firstwordCDI)
devdata$Age1stWordaudio <- as.numeric(as.character(devdata$Age1stWordaudio))
devdata$Age1stWordvideo <- as.numeric(as.character(devdata$Age1stWordvideo))
devdata$Age1stWordCDI <- as.numeric(as.character(devdata$Age1stWordCDI))
devdata %>% filter(audio_video == "audio") %>%
group_by(subj) %>%
summarise(totalprod = sum(nTokens)) %>%
filter(totalprod == 0) # 3 infants produce no tokens in audio data
devdata %>% filter(audio_video == "video") %>%
group_by(subj) %>%
summarise(totalprod = sum(nTokens)) %>%
filter(totalprod == 0) # 6 infants produce no tokens in video data
devdata %>%
group_by(subj) %>%
summarise(totalprod = sum(CDI_TotalProd)) %>%
filter(totalprod == 0) # 0 infants have 0 words according to CDI reports
Demo_data_ProdStudy <- ProdData %>%     # save csv file of demo data for Git Repo
select(subj, month, sex, MOTedu, Siblings, VMSgroup, VMS, CPtokens, CPtypes) %>%
write_csv("Data/demo_data_randsubj.csv")
# Updated 20th January 2020
# This script considers infants' VMS and CP productions in relation to developmental data (CDI and types/tokens produced in home recordings)
library(tidyverse)
library(forcats)
library(feather)
library(stringi)
devdata_types <- read_feather("Data/basic_levels_Mar1518_randsubj.feather") %>%
mutate(subj = factor(subj)) %>%
filter(speaker == 'CHI') %>%    # select only infant productions
group_by(subj, month, audio_video) %>%
summarise(nTypes = n_distinct(basic_level))
devdata_tokens <- read_feather("Data/basic_levels_Mar1518_randsubj.feather") %>%
mutate(subj = factor(subj)) %>%
filter(speaker == 'CHI') %>%    # select only infant productions
group_by(subj, month, audio_video) %>%
tally() %>%
rename("nTokens" = "n") %>%
left_join(devdata_types)
devdata_input <- read_feather("Data/basic_levels_Mar1518_randsubj.feather") %>%
mutate(subj = factor(subj)) %>%
filter(speaker == 'MOT') %>%    # select only infant productions
group_by(subj, month, audio_video) %>%
tally() %>%
rename("nInput" = "n") %>%
left_join(devdata_tokens) %>%
replace(is.na(.), 0)
devdataCDI <- read_csv("Data/CDI_randsubj.csv") %>%
mutate(subj = factor(subj),
month = factor(month),
month = fct_recode(month,
"06" = "6",
"07" = "7",
"08" = "8",
"09" = "9")) %>%
left_join(devdata_input) %>%
replace(is.na(.), 0)
CPdata_dev <- ProdData %>% select(subj, VMSgroup, CPtypes, CPtokens)
library(tidyverse)
library(forcats)
library(feather)
library(stringi)
CPdata <- read_csv("Data/CPdata_randsubj.csv") %>% # read in CPdata_randsubj.csv to use as a base df for all following dfs
mutate(subj = factor(subj))
ProdData <- CPdata %>%
group_by(subj, month, sex, MOTedu, Siblings, VMSgroup, VMS) %>%
tally() %>%
ungroup() %>%
rename("CPtokens" = "n") %>%
mutate(MOTedulevel = fct_recode(MOTedu,
"1" = "High School",
"2" =  "Some college",
"3" = "Assoc Degree",
"4" = "Bachelors Degree",
"5" = "Masters Degree",
"6" =  "Doctorate"))
ProdData$MOTedulevel <- as.numeric(as.character(ProdData$MOTedulevel))
CPtyp <- CPdata %>%
group_by(subj) %>%
summarise(CPtypes = n_distinct(ctype)) %>%  # How many CP types produced per infant?
ungroup()
VMS.Prod <- CPdata %>%
group_by(subj, VMS.Prod.Cong, VMSgroup) %>%
tally() %>%
spread(VMS.Prod.Cong, n) %>%
rename(VMS.Prod.NoMatch = `FALSE`,
VMS.Prod.Match = `TRUE`) %>%
mutate(VMS.Prod.Match = ifelse(VMSgroup!="noVMS" & is.na(VMS.Prod.Match),0,VMS.Prod.Match),  # Variable only applies to withVMS infants
VMS.Prod.NoMatch = ifelse(VMSgroup!="noVMS" & is.na(VMS.Prod.NoMatch),0,VMS.Prod.NoMatch), # Keep noVMS infants as NA, change withVMS infants with no CPs to 0
VMS.Prod.match.PC = VMS.Prod.Match/(VMS.Prod.Match+VMS.Prod.NoMatch)) # For infants who have VMS, what % of CPs are congruent with VMS?
Prod.Obj <- CPdata %>%                  # Only includes 43 infants as subj 944 doesn't have any attended objects
filter(!grepl("^\\[",object)) %>%    # exclude all instances where object is coded as [toy], [unclear], etc but keep insances of e.g. 'lxx [name]'
group_by(subj, Prod.Obj.Cong, VMSgroup) %>%
tally() %>%
spread(Prod.Obj.Cong, n) %>%
ungroup() %>%
replace(is.na(.), 0) %>%               # analysis includes all infants, so change all NAs to 0 across VMS groups
rename(Prod.Obj.NoMatch = `FALSE`,
Prod.Obj.Match = `TRUE`) %>%
mutate(Prod.Obj.match.PC = Prod.Obj.Match/(Prod.Obj.Match+Prod.Obj.NoMatch)) # What % of attended objects match infants' CPs?
Prod.Prompt <- CPdata %>%
filter(!grepl("^\\[",cgprompt)) %>%     # exclude all instances where object is coded as [toy], [unclear], etc but keep insances of e.g. 'lxx [name]'
group_by(subj, Prod.Prompt.Cong, VMSgroup) %>%
tally() %>%
spread(Prod.Prompt.Cong, n) %>%
replace(is.na(.), 0) %>%               # analysis includes all infants, so change all NAs to 0 across VMS groups
rename(Prod.Prompt.NoMatch = `FALSE`,
Prod.Prompt.Match = `TRUE`) %>%
mutate(Prod.Prompt.match.PC = Prod.Prompt.Match/(Prod.Prompt.Match+Prod.Prompt.NoMatch)) # What % of CG prompts match infants' CPs?
CP.Obj <- CPdata %>%
filter(!grepl("^\\[",object)) %>%    # exclude all instances where object is coded as [toy], [unclear], etc
group_by(subj) %>%
count() %>%
rename(nObj = n) %>% # How many CPs are accompanied by an Object?
ungroup() %>%
add_row(subj = "944", nObj = 0)   # subj 944 has no objects, so add this row manually
CP.Prompt <- CPdata %>%
filter(!grepl("^\\[",cgprompt)) %>%  # exclude all instances where prompt is coded as [unclear], etc, but include eg. "txx [chi name]"
group_by(subj) %>%
tally() %>%
rename(nPrompt = n)    # How many CPs are accompanied by a CG Prompt?
cong.CP.P <- CPdata %>%
filter(VMS.Prompt.Cong == T) %>%   # withVMS infants only; one infant has no VMS congruent prompts
group_by(subj, Prod.Prompt.Cong, VMSgroup) %>%
tally() %>%
spread(Prod.Prompt.Cong, n) %>%
ungroup() %>%
replace(is.na(.), 0) %>%    # Change NAs in the No.cong.CP.P column to 0 so %s can be calculated for all withVMS infants
rename(cong.CP.P = `TRUE`,
No.cong.CP.P = `FALSE`) %>%
mutate(PCVMSMatch.Prompt = cong.CP.P/(cong.CP.P+No.cong.CP.P))  # When there is a VMS-congruent CG prompt, how often do infants respond with a congruent CP?
cong.CP.O <- CPdata %>%
filter(VMS.Obj.Cong == T) %>%    # withVMS infants only; two infants have no VMS congruent objects
group_by(subj, Prod.Obj.Cong, VMSgroup) %>%
tally() %>%
spread(Prod.Obj.Cong, n) %>%
ungroup() %>%
replace(is.na(.), 0) %>%      # Change NAs in the No.cong.CP.O column to 0 so %s can be calculated for all withVMS infants
rename(cong.CP.O = `TRUE`,
No.cong.CP.O = `FALSE`) %>%
mutate(PCVMSMatch.Obj = cong.CP.O/(cong.CP.O+No.cong.CP.O)) #  When there is a VMS-congruent Object, how often do infants respond with a congruent CP?
incong.CP.P <- CPdata %>%
filter(VMS.Prompt.Cong == F,            # includes withVMS and noVMS infants (noVMS infants all filter as VMS.Prompt.Cong ==F)
!grepl("^\\[",cgprompt)) %>%     # filter out all instances of [unclear], etc but keep, e.g. 'lxx [name]'
group_by(subj, Prod.Prompt.Cong) %>%
tally() %>%
spread(Prod.Prompt.Cong, n) %>%
replace(is.na(.), 0) %>%           # Change NAs to 0 so %s can be calculated for all infants
rename(incong.CP.P = `TRUE`,
No.incong.CP.P = `FALSE`) %>%
mutate(PCNoVMSMatch.Prompt = incong.CP.P/(incong.CP.P+No.incong.CP.P)) # When there is a VMS-INcongruent CG prompt, how often do infants respond with a congruent CP?
incong.CP.O <- CPdata %>%
filter(VMS.Obj.Cong == F,             # includes withVMS and noVMS infants (noVMS infants all filter as VMS.Obj.Cong ==F )
!grepl("^\\[",object)) %>%     # filter out all instances of [toy], [unavailable], etc but keep, e.g. 'lxx [name]'
group_by(subj, Prod.Obj.Cong) %>%
tally() %>%
spread(Prod.Obj.Cong, n) %>%
ungroup() %>%
replace(is.na(.), 0) %>%                           # Change NAs to 0 so %s can be calculated for all infants
rename(incong.CP.O = `TRUE`,
No.incong.CP.O = `FALSE`) %>%
mutate(PCNoVMSMatch.Obj = incong.CP.O/(incong.CP.O+No.incong.CP.O))  # When there is a VMS-INcongruent Object, how often do infants respond with a congruent CP?
ProdData <- ProdData %>%           # How many consonant tokens are produced by each infant?
left_join(CPtyp) %>%             # How many consonant types are produced by each infant?
left_join(VMS.Prod) %>%          # Does infant's CP match their VMS?
left_join(Prod.Obj) %>%          # Does infant's CP match the attended object?
left_join(Prod.Prompt) %>%       # Does infant's CP match the caregiver prompt
left_join(CP.Obj) %>%            # How many CPs are accompanied by an object?
left_join(CP.Prompt) %>%         # How many CPs are accompanied by a caregiver prompt?
left_join(cong.CP.P) %>%         # When there is a VMS-congruent CG prompt, how often do infants respond with a congruent CP?
left_join(cong.CP.O) %>%         # When there is a VMS-congruent object, how often do infants respond with a congruent CP?
left_join(incong.CP.P) %>%       # When there is a VMS-incongruent CG prompt, how often do infants respond with a congruent CP?
left_join(incong.CP.O) %>%       # When there is a VMS-incongruent object, how often do infants respond with a congruent CP?
select(-Prod.Obj.NoMatch, -Prod.Obj.Match, -Prod.Prompt.NoMatch, -Prod.Prompt.Match,
-No.cong.CP.P, -cong.CP.P, -No.cong.CP.O, -cong.CP.O, -No.incong.CP.O, -No.incong.CP.P,
-incong.CP.O, -incong.CP.P)
devdata_types <- read_feather("Data/basic_levels_Mar1518_randsubj.feather") %>%
mutate(subj = factor(subj)) %>%
filter(speaker == 'CHI') %>%    # select only infant productions
group_by(subj, month, audio_video) %>%
summarise(nTypes = n_distinct(basic_level))
devdata_tokens <- read_feather("Data/basic_levels_Mar1518_randsubj.feather") %>%
mutate(subj = factor(subj)) %>%
filter(speaker == 'CHI') %>%    # select only infant productions
group_by(subj, month, audio_video) %>%
tally() %>%
rename("nTokens" = "n") %>%
left_join(devdata_types)
devdata_input <- read_feather("Data/basic_levels_Mar1518_randsubj.feather") %>%
mutate(subj = factor(subj)) %>%
filter(speaker == 'MOT') %>%    # select only infant productions
group_by(subj, month, audio_video) %>%
tally() %>%
rename("nInput" = "n") %>%
left_join(devdata_tokens) %>%
replace(is.na(.), 0)
devdataCDI <- read_csv("Data/CDI_randsubj.csv") %>%
mutate(subj = factor(subj),
month = factor(month),
month = fct_recode(month,
"06" = "6",
"07" = "7",
"08" = "8",
"09" = "9")) %>%
left_join(devdata_input) %>%
replace(is.na(.), 0)
CPdata_dev <- ProdData %>% select(subj, VMSgroup, CPtypes, CPtokens)
devdata <- devdataCDI %>%
left_join(devdata_tokens) %>%
select(subj, month, audio_video, nTokens, nTypes, nInput, CDI_TotalProd) %>%
left_join(vmstotal, by = "subj") %>%
select(-month.y) %>%
rename("month" = "month.x") %>%  # remember to filter by audio_video when running tests on CDI data
left_join(CPdata_dev)
library(tidyverse)
library(forcats)
library(feather)
library(stringi)
# Run ProdData to generate appropriate datasets
source("ProductionData_randsubj.R")
devdata_types <- read_feather("Data/basic_levels_Mar1518_randsubj.feather") %>%
mutate(subj = factor(subj)) %>%
filter(speaker == 'CHI') %>%    # select only infant productions
group_by(subj, month, audio_video) %>%
summarise(nTypes = n_distinct(basic_level))
devdata_tokens <- read_feather("Data/basic_levels_Mar1518_randsubj.feather") %>%
mutate(subj = factor(subj)) %>%
filter(speaker == 'CHI') %>%    # select only infant productions
group_by(subj, month, audio_video) %>%
tally() %>%
rename("nTokens" = "n") %>%
left_join(devdata_types)
devdata_input <- read_feather("Data/basic_levels_Mar1518_randsubj.feather") %>%
mutate(subj = factor(subj)) %>%
filter(speaker == 'MOT') %>%    # select only infant productions
group_by(subj, month, audio_video) %>%
tally() %>%
rename("nInput" = "n") %>%
left_join(devdata_tokens) %>%
replace(is.na(.), 0)
devdataCDI <- read_csv("Data/CDI_randsubj.csv") %>%
mutate(subj = factor(subj),
month = factor(month),
month = fct_recode(month,
"06" = "6",
"07" = "7",
"08" = "8",
"09" = "9")) %>%
left_join(devdata_input) %>%
replace(is.na(.), 0)
CPdata_dev <- ProdData %>% select(subj, VMSgroup, CPtypes, CPtokens)
devdata <- devdataCDI %>%
left_join(devdata_tokens) %>%
select(subj, month, audio_video, nTokens, nTypes, nInput, CDI_TotalProd) %>%
left_join(vmstotal, by = "subj") %>%
select(-month.y) %>%
rename("month" = "month.x") %>%  # remember to filter by audio_video when running tests on CDI data
left_join(CPdata_dev)
firstwordaudio <- devdata %>% filter(audio_video == "audio" & nTokens > 0) %>% group_by(subj) %>% summarise(Age1stWordaudio = min(month))
firstwordvideo <- devdata %>% filter(audio_video == "video" & nTokens > 0) %>% group_by(subj) %>% summarise(Age1stWordvideo = min(month))
firstwordCDI <- devdata %>% filter(CDI_TotalProd > 0) %>% group_by(subj) %>% summarise(Age1stWordCDI = min(month))
devdata <- devdata %>%
left_join(firstwordaudio) %>%
left_join(firstwordvideo) %>%
left_join(firstwordCDI)
devdata$Age1stWordaudio <- as.numeric(as.character(devdata$Age1stWordaudio))
devdata$Age1stWordvideo <- as.numeric(as.character(devdata$Age1stWordvideo))
devdata$Age1stWordCDI <- as.numeric(as.character(devdata$Age1stWordCDI))
devdata %>% filter(audio_video == "audio") %>%
group_by(subj) %>%
summarise(totalprod = sum(nTokens)) %>%
filter(totalprod == 0) # 3 infants produce no tokens in audio data
devdata %>% filter(audio_video == "video") %>%
group_by(subj) %>%
summarise(totalprod = sum(nTokens)) %>%
filter(totalprod == 0) # 6 infants produce no tokens in video data
devdata %>%
group_by(subj) %>%
summarise(totalprod = sum(CDI_TotalProd)) %>%
filter(totalprod == 0) # 0 infants have 0 words according to CDI reports
Demo_data_ProdStudy <- ProdData %>%     # save csv file of demo data for Git Repo
select(subj, month, sex, MOTedu, Siblings, VMSgroup, VMS, CPtokens, CPtypes) %>%
write_csv("Data/demo_data_randsubj.csv")
source("ProductionData_nostimmatch_randsubj.R")
source("Data_scrambling_nostimmatch_randsubj.R")
source("Data_scrambling_nostimmatch_randsubj.R")
library(dplyr)
source("ProductionData_nostimmatch.R") # if script is run separately from InfantProductionStudy.Rmd then this script should be run first
library(dplyr)
library(tidyverse)
#source("DataGathering_consonants.R")
source("ProductionData_nostimmatch_randsubj.R") # if script is run separately from InfantProductionStudy.Rmd then this script should be run first
set.seed(42) #meaning of life
CPdata.scr.C1Prompt_nostimmatch <- dplyr::select(CPdata_nostimmatch, subj, month, sex, VMSgroup, ctype, VMS, C1Obj, C1Prompt) %>%
mutate(Prompt.scrambled = sample(C1Prompt)) # C1 of CG prompts are scrambled
set.seed(13) #lucky number
CPdata.scr.C1Prompt.C1Obj_nostimmatch <- CPdata.scr.C1Prompt_nostimmatch %>%
mutate(Object.scrambled = sample(C1Obj))# C1 of attended objects are scrambled
set.seed(1) #loneliest number
CPdata.scr.C1Prompt.C1Obj.ctype_nostimmatch <- CPdata.scr.C1Prompt.C1Obj_nostimmatch %>%
mutate(InfantProd.scrambled = sample(ctype)) # Infants' CPs are scrambled
CPdata.scr_nostimmatch <- CPdata.scr.C1Prompt.C1Obj.ctype_nostimmatch %>%
mutate(Prompt.inProd = stri_detect_regex(as.character(ctype), as.character(Prompt.scrambled)), # is scrambled prompt congruent with CP
Object.inProd = stri_detect_regex(as.character(ctype), as.character(Object.scrambled)), # is scrambled object congruent with CP
VMS.match = stri_detect_regex(VMS, as.character(InfantProd.scrambled)) # Does VMS match scrambled CP
)
Object.scrambled <- CPdata.scr_nostimmatch %>%
group_by(subj, month, sex, VMSgroup, VMS, Object.inProd) %>%
filter(Object.scrambled != 'none') %>%
tally() %>%
spread(Object.inProd, n) %>%
rename(NoMatch = `FALSE`,
Match = `TRUE`) %>%
mutate(Prod.Obj.match.PC = Match/(Match+NoMatch)) %>%  # What % of scrambled objects match CPs?
select(-Match, -NoMatch)
Prompt.scramble <- CPdata.scr_nostimmatch %>%
filter(Prompt.scrambled != 'none') %>% # Remove 'none' to use same approach as used when testing real data
group_by(subj, Prompt.inProd) %>%   # What % of scrambled prompts match CP?
tally() %>%
spread(Prompt.inProd, n) %>%
rename(NoMatch = `FALSE`,
Match = `TRUE`) %>%
mutate(Prod.Prompt.match.PC = Match/(Match+NoMatch)) %>%
select(subj, Prod.Prompt.match.PC)
data.scrambled_nostimmatch <- Object.scrambled %>%
left_join(Prompt.scramble) %>%
replace(is.na(.), 0)
source("ProductionData_noC1match_randsubj.R")
source("Data_scrambling_noC1match_randsubj.R")
library(dplyr)
library(tidyverse)
source("ProductionData_noC1match.R")  # if script is run separately from InfanyProductionStudy.Rmd then this script should be run first
set.seed(42) #meaning of life
source("ProductionData_noC1match_randsubj.R")  # if script is run separately from InfanyProductionStudy.Rmd then this script should be run first
set.seed(42) #meaning of life
CPdata.scr.C1Prompt_noC1match <- dplyr::select(CPdata_noC1match, subj, month, sex, VMSgroup, ctype, VMS, C1Obj, C1Prompt) %>%
mutate(Prompt.scrambled = sample(C1Prompt)) # C1 of CG prompts are scrambled
set.seed(13) #lucky number
CPdata.scr.C1Prompt.C1Obj_noC1match <- CPdata.scr.C1Prompt_noC1match %>%
mutate(Object.scrambled = sample(C1Obj))# C1 of attended objects are scrambled
set.seed(1) #loneliest number
CPdata.scr.C1Prompt.C1Obj.ctype_noC1match <- CPdata.scr.C1Prompt.C1Obj_noC1match %>%
mutate(InfantProd.scrambled = sample(ctype)) # Infants' CPs are scrambled
CPdata.scr_noC1match <- CPdata.scr.C1Prompt.C1Obj.ctype_noC1match %>%
mutate(Prompt.inProd = stri_detect_regex(as.character(ctype), as.character(Prompt.scrambled)), # is scrambled prompt congruent with CP
Object.inProd = stri_detect_regex(as.character(ctype), as.character(Object.scrambled)), # is scrambled object congruent with CP
VMS.match = stri_detect_regex(VMS, as.character(InfantProd.scrambled)) # Does VMS match scrambled CP
)
Object.scrambled <- CPdata.scr_noC1match %>%
group_by(subj, month, sex, VMSgroup, VMS, Object.inProd) %>%
filter(Object.scrambled != 'none') %>%
tally() %>%
spread(Object.inProd, n) %>%
rename(NoMatch = `FALSE`,
Match = `TRUE`) %>%
mutate(Prod.Obj.match.PC = Match/(Match+NoMatch)) %>%  # What % of scrambled objects match CPs?
select(-Match, -NoMatch)
Prompt.scramble <- CPdata.scr_noC1match %>%
filter(Prompt.scrambled != 'none') %>% # Remove 'none' to use same approach as used when testing real data
group_by(subj, Prompt.inProd) %>%   # What % of scrambled prompts match CP?
tally() %>%
spread(Prompt.inProd, n) %>%
rename(NoMatch = `FALSE`,
Match = `TRUE`) %>%
mutate(Prod.Prompt.match.PC = Match/(Match+NoMatch)) %>%
select(subj, Prod.Prompt.match.PC)
data.scrambled_noC1match <- Object.scrambled %>%
left_join(Prompt.scramble) %>%
replace(is.na(.), 0)
# Updated 8th March 2019
# This script takes CPdata.csv and scrambles various aspects of infant and caregiver data. It then recreates the TRUE/FALSE binomials in line with
# these randomly scarmbled responses, and re-calculates all proportions based on these.
# It works with data filtered for Object and Prompt exact matches
library(dplyr)
library(tidyverse)
source("ProductionData_nostimmatch_randsubj.R") # if script is run separately from InfantProductionStudy.Rmd then this script should be run first
set.seed(42) #meaning of life
CPdata.scr.C1Prompt_nostimmatch <- dplyr::select(CPdata_nostimmatch, subj, month, sex, VMSgroup, ctype, VMS, C1Obj, C1Prompt) %>%
mutate(Prompt.scrambled = sample(C1Prompt)) # C1 of CG prompts are scrambled
set.seed(13) #lucky number
CPdata.scr.C1Prompt.C1Obj_nostimmatch <- CPdata.scr.C1Prompt_nostimmatch %>%
mutate(Object.scrambled = sample(C1Obj))# C1 of attended objects are scrambled
set.seed(1) #loneliest number
CPdata.scr.C1Prompt.C1Obj.ctype_nostimmatch <- CPdata.scr.C1Prompt.C1Obj_nostimmatch %>%
mutate(InfantProd.scrambled = sample(ctype)) # Infants' CPs are scrambled
CPdata.scr_nostimmatch <- CPdata.scr.C1Prompt.C1Obj.ctype_nostimmatch %>%
mutate(Prompt.inProd = stri_detect_regex(as.character(ctype), as.character(Prompt.scrambled)), # is scrambled prompt congruent with CP
Object.inProd = stri_detect_regex(as.character(ctype), as.character(Object.scrambled)), # is scrambled object congruent with CP
VMS.match = stri_detect_regex(VMS, as.character(InfantProd.scrambled)) # Does VMS match scrambled CP
)
# Now re-run variable calculations for scrambled data
Object.scrambled <- CPdata.scr_nostimmatch %>%
group_by(subj, month, sex, VMSgroup, VMS, Object.inProd) %>%
filter(Object.scrambled != 'none') %>%
tally() %>%
spread(Object.inProd, n) %>%
rename(NoMatch = `FALSE`,
Match = `TRUE`) %>%
mutate(Prod.Obj.match.PC = Match/(Match+NoMatch)) %>%  # What % of scrambled objects match CPs?
select(-Match, -NoMatch)
Prompt.scramble <- CPdata.scr_nostimmatch %>%
filter(Prompt.scrambled != 'none') %>% # Remove 'none' to use same approach as used when testing real data
group_by(subj, Prompt.inProd) %>%   # What % of scrambled prompts match CP?
tally() %>%
spread(Prompt.inProd, n) %>%
rename(NoMatch = `FALSE`,
Match = `TRUE`) %>%
mutate(Prod.Prompt.match.PC = Match/(Match+NoMatch)) %>%
select(subj, Prod.Prompt.match.PC)
# Join with Object.scrambled to give scrambled dataset
data.scrambled_nostimmatch <- Object.scrambled %>%
left_join(Prompt.scramble) %>%
replace(is.na(.), 0)
